name: Deploy Application

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.PRIVATE_KEY }}

    - name: Clone or Update Repository
      run: |
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -t -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        if [ ! -d "/home/ec2-user/TellMe" ]; then
          echo "Clonando repositorio..."
          sudo git clone https://github.com/iliestefa/TellMe.git /home/ec2-user/TellMe
        else
          echo "Actualizando repositorio..."
          cd /home/ec2-user/TellMe
          sudo git reset --hard
          sudo git pull origin main
        fi
        EOF

    - name: Create Server Env
      run: |
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -t -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        echo "Creando .env del servidor..."
        sudo bash -c "cat > /home/ec2-user/TellMe/server/.env << 'EOL'
        RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
        RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
        RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
        RABBITMQ_VHOST=${{ secrets.RABBITMQ_VHOST }}
        QUEUE=${{ secrets.QUEUE }}
        WS_SERVER_URL=${{ secrets.WS_SERVER_URL }}
        FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
        FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
        REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
        MONGO_URI=${{ secrets.MONGO_URI }}
        REDIS_URL=${{ secrets.REDIS_URL }}
        SERVER_PORT=${{ secrets.SERVER_PORT }}
        HOST=${{ secrets.HOST }}
        REACT_APP_HOST=${{ secrets.HOST }}
        REACT_APP_API_URL=${{ secrets.API_URL }}
        API_URL=${{ secrets.API_URL }}
        EOL"
        EOF

    - name: Copy Env Files
      run: |
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -t -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        echo "Copiando archivos .env..."
        sudo cp /home/ec2-user/TellMe/server/.env /home/ec2-user/TellMe/client/.env
        sudo cp /home/ec2-user/TellMe/server/.env /home/ec2-user/TellMe/message-service/.env
        sudo cp /home/ec2-user/TellMe/server/.env /home/ec2-user/TellMe/.env
        EOF

    - name: Build and Deploy
      run: |
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -t -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        cd /home/ec2-user/TellMe
        
        echo "=== Iniciando proceso de build ==="
        
        echo "1. Configurando caché de Docker..."
        docker buildx create --use || true
        
        echo "2. Deteniendo contenedores..."
        docker-compose down
        
        echo "3. Limpiando recursos no utilizados..."
        docker system prune -f
        
        echo "4. Puliendo imágenes base..."
        docker-compose pull
        
        echo "5. Construyendo cliente..."
        COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1 client
        
        echo "6. Construyendo servidor..."
        COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1 server
        
        echo "7. Construyendo message-service..."
        COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1 message-service
        
        echo "8. Levantando contenedores..."
        docker-compose up -d
        
        echo "9. Verificando estado..."
        docker-compose ps
        
        echo "=== Proceso de build completado ==="
        EOF